[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Attendance",
  "enabled": 1,
  "modified": "2024-06-13 17:07:57.532167",
  "module": null,
  "name": "Attendance Script",
  "script": "frappe.ui.form.on('Attendance', {\n    validate: function(frm) {\n        if (frm.doc.employee && frm.doc.custom_work_location) {\n            frappe.call({\n                method: 'frappe.client.get_value',\n                args: {\n                    doctype: 'Employee',\n                    filters: { 'employee': frm.doc.employee },\n                    fieldname: 'work_location'\n                },\n                callback: function(response) {\n                    if (response.message && response.message.work_location) {\n                        var employeeWorkLocation = response.message.work_location;\n                        var customWorkLocation = frm.doc.custom_work_location;\n\n                        if (employeeWorkLocation !== customWorkLocation) {\n                            frappe.throw(\"Work locations do not match. Please select the correct work location.\");\n                            validated = false; // Prevent saving\n                        } else {\n                            validated = true; // Allow saving\n                        }\n                    } else {\n                        frappe.msgprint(\"Work location not found for the selected employee.\");\n                        validated = false; // Prevent saving\n                    }\n                },\n                error: function(err) {\n                    frappe.msgprint(\"Error fetching work location: \" + err);\n                    validated = false; // Prevent saving\n                }\n            });\n\n            // Return false to prevent default validation\n            return false;\n        }\n    },\n\n    before_save: function(frm) {\n        // Additional validation or actions before saving can be added here if needed\n    },\n\n    custom_work_location: function(frm) {\n        // Re-validate when custom_work_location changes\n        frm.trigger('validate');\n    }\n});\n\n\n\n\n// frappe.ui.form.on('Attendance', {\n//     refresh(frm) {\n//         // Check if work_location data is already fetched to avoid duplicate message\n//         if (!frm.work_location_fetched && frm.doc.employee) {\n//             frm.work_location_fetched = true; // Set flag to indicate data has been fetched\n//             frappe.call({\n//                 method: 'frappe.client.get_value',\n//                 args: {\n//                     doctype: 'Employee',\n//                     filters: { 'employee': frm.doc.employee },\n//                     fieldname: ['work_location']\n//                 },\n//                 callback: function(response) {\n//                     if (response.message && response.message.work_location) {\n//                         var workLocation = response.message.work_location;\n//                         frappe.msgprint('Work Location: ' + workLocation);\n//                         // You can do further processing with workLocation here\n//                     }\n//                 }\n//             });\n//         }\n//     }\n// });\n\n\n\n\n\n\n// frappe.ui.form.on('Attendance', {\n// \trefresh(frm) {\n// // \tfrappe.msgprint(\"hello\")\n// \t}\n// })\n\n// frappe.ui.form.on('Attendance', {\n//     before_save: function(frm) {\n//         if (navigator.geolocation) {\n//             navigator.geolocation.getCurrentPosition(\n//                 function(position) {\n//                     var user_latitude = position.coords.latitude;\n//                     var user_longitude = position.coords.longitude;\n\n//                     frappe.call({\n//                         method: 'frappe.client.get_value',\n//                         args: {\n//                             doctype: 'Employee',\n//                             filters: { 'name': frm.doc.employee },\n//                             fieldname: 'custom_geo_location'\n//                         },\n//                         callback: function(r) {\n//                             if (r.message && r.message.allowed_location) {\n//                                 var [allowed_latitude, allowed_longitude] = r.message.allowed_location.split(',');\n//                                 var distance = getDistanceFromLatLonInKm(user_latitude, user_longitude, parseFloat(allowed_latitude), parseFloat(allowed_longitude));\n//                                 var allowed_distance = 0.1; // Allowable distance in km\n\n//                                 if (distance > allowed_distance) {\n//                                     frappe.throw(__('You can only mark attendance from the allowed location.'));\n//                                     frappe.validated = false;\n//                                 }\n//                             } else {\n//                                 frappe.throw(__('Allowed location is not set for this employee.'));\n//                                 frappe.validated = false;\n//                             }\n//                         }\n//                     });\n//                 },\n//                 function(error) {\n//                     if (error.code == error.PERMISSION_DENIED) {\n//                         frappe.throw(__('You denied the request for Geolocation. Attendance cannot be marked without location access.'));\n//                     } else {\n//                         frappe.throw(__('Unable to retrieve your location.'));\n//                     }\n//                 }\n//             );\n//         } else {\n//             frappe.throw(__('Geolocation is not supported by this browser.'));\n//         }\n//     }\n// });\n\n// frappe.ui.form.on('Attendance', {\n//     before_save: function(frm) {\n//         function validateLocation(user_latitude, user_longitude) {\n//             frappe.call({\n//                 method: 'frappe.client.get_value',\n//                 args: {\n//                     doctype: 'Employee',\n//                     filters: { 'name': frm.doc.employee },\n//                     fieldname: 'custom_geo_location'\n//                 },\n//                 callback: function(r) {\n//                     if (r.message && r.message.custom_geo_location) {\n//                         var [allowed_latitude, allowed_longitude] = r.message.custom_geo_location.split(',');\n//                         var distance = getDistanceFromLatLonInKm(user_latitude, user_longitude, parseFloat(allowed_latitude), parseFloat(allowed_longitude));\n//                         var allowed_distance = 0.1; // Allowable distance in km\n\n//                         if (distance > allowed_distance) {\n//                             frappe.throw(__('You can only mark attendance from the allowed location.'));\n//                             frappe.validated = false;\n//                         }\n//                     } else {\n//                         frappe.throw(__('Allowed location is not set for this employee.'));\n//                         frappe.validated = false;\n//                     }\n//                 }\n//             });\n//         }\n\n//         if (location.protocol === 'https:') {\n//             if (navigator.geolocation) {\n//                 navigator.geolocation.getCurrentPosition(\n//                     function(position) {\n//                         var user_latitude = position.coords.latitude;\n//                         var user_longitude = position.coords.longitude;\n//                         validateLocation(user_latitude, user_longitude);\n//                     },\n//                     function(error) {\n//                         if (error.code == error.PERMISSION_DENIED) {\n//                             frappe.throw(__('You denied the request for Geolocation. Attendance cannot be marked without location access.'));\n//                         } else {\n//                             frappe.throw(__('Unable to retrieve your location.'));\n//                         }\n//                     }\n//                 );\n//             } else {\n//                 frappe.throw(__('Geolocation is not supported by this browser.'));\n//             }\n//         } else {\n//             // Fallback to IP-based location service for http\n//             fetch('https://ipapi.co/json/')\n//                 .then(response => response.json())\n//                 .then(data => {\n//                     var user_latitude = data.latitude;\n//                     var user_longitude = data.longitude;\n//                     validateLocation(user_latitude, user_longitude);\n//                 })\n//                 .catch(error => {\n//                     frappe.throw(__('Unable to retrieve your location using IP address.'));\n//                 });\n//         }\n//     }\n// });\n\n// // Utility function to calculate distance between two coordinates\n// function getDistanceFromLatLonInKm(lat1, lon1, lat2, lon2) {\n//     var R = 6371; // Radius of the Earth in km\n//     var dLat = deg2rad(lat2 - lat1);\n//     var dLon = deg2rad(lon1 - lon2); // Fixed the argument order to be lon1 - lon2\n//     var a =\n//         Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n//         Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *\n//         Math.sin(dLon / 2) * Math.sin(dLon / 2);\n//     var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n//     var distance = R * c; // Distance in km\n//     return distance;\n// }\n\n// function deg2rad(deg) {\n//     return deg * (Math.PI / 180);\n// }\n\n",
  "view": "Form"
 }
]